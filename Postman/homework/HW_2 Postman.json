// 1-3. first
// 1.Отправить запрос. 2.Статус код 200 
pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });

// 3.Проверить, что в body приходит правильный string.

pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});




// 1-12. user_info_3
// 1. Отправить запрос. 2. Статус код 200. 3. Спарсить response body в json.

var jsonData = pm.response.json();
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 4. Проверить, что name в ответе равно name s request (name вбить руками) 

pm.test("name July", function () {
    pm.expect(jsonData.name).to.eql("July");
});

// 5. Проверить, что age в ответе равно age s request (age вбить руками)

pm.test("age 24", function () {
    pm.expect(jsonData.age).to.eql("24");
});

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками).

pm.test("salary 500", function () {
    pm.expect(jsonData.salary).to.eql(500);
});

// 7. Спарсить request. 8. Проверить, что name в ответе равно name s request (name забрать из request).

let req_name = request.data.name

pm.test("name July", function () {
    pm.expect(jsonData.name).to.eql(req_name);
});

// 9. Проверить, что age в ответе равно age s request (age забрать из request).

let req_age = request.data.age

pm.test("age 24", function () {
    pm.expect(jsonData.age).to.eql(req_age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request). Добавили + перед request.data.salary тк разные типы данных (по консоли).

let req_salary = +request.data.salary

// console.log ("req_salary =" + typeof req_salary)
// console.log ("resp_salary =" + typeof jsonData.salary)

pm.test("salary 500", function () {
    pm.expect(jsonData.salary).to.eql(req_salary);
});

// 11. Вывести в консоль параметр family из response. Если не тип данных, то просто так:

console.log (jsonData.family)

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).

let req_salary_1_5 = +request.data.salary * 4

pm.test("u_salary_1_5_year 2000", function () {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary_1_5);
});



//1-12. object_info_3
// 1. Отправить запрос. 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let resp = pm.response.json();
let resp_name = resp.name

// 4. Спарсить request.
let req = pm.request.url.query.toObject();
let req_name = req.name

// 5. Проверить, что name в ответе равно name s request (name забрать из request).

pm.test("name Sirius", function () {
    pm.expect(resp_name).to.eql(req_name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request).

// var jsonData = pm.response.json();
let resp_age = resp.age
let req_age = req.age

pm.test("age 2", function () {
    pm.expect(resp_age).to.eql(req_age);
});

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request).

let req_salary = +req.salary
let resp_salary = resp.salary

pm.test("salary 1000", function () {
    pm.expect(resp_salary).to.eql(req_salary);
});

// 8. Вывести в консоль параметр family из response.

var jsonData = pm.response.json();
console.log (jsonData.family);

// 9. Проверить, что у параметра dog есть параметры name (property!!!!).

pm.test("dog have name", function () {
    pm.expect(resp.family.pets.dog).to.have.property("name");
});

// 10. Проверить, что у параметра dog есть параметры age (Property!!!).

pm.test("dog have age", function () {
    pm.expect(resp.family.pets.dog).to.have.property("age");
});

// 11. Проверить, что параметр name имеет значение Luky (eql!!!!).

pm.test("name Luky", function () {
    pm.expect(resp.family.pets.dog.name).to.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4 (eql!!!).

pm.test("age Luky", function () {
    pm.expect(resp.family.pets.dog.age).to.eql(4);
});




//1-21. object_info_4
// 1. Отправить запрос. 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.

let resp = pm.response.json();

// 4. Спарсить request.

let req = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request).

let resp_name = resp.name
let req_name = req.name

pm.test("name Pablo", function () {
    pm.expect(resp_name).to.eql(req_name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request).

let resp_age = resp.age
let req_age = +req.age 

pm.test("age 25", function () {
    pm.expect(resp_age).to.eql(req_age);
});

// 7. Вывести в консоль параметр salary из request.

let req_salary = +req.salary
console.log(req_salary)

let resp_salary = resp.salary
let resp_salary_0 = resp.salary[0]
let resp_salary_1 = +resp.salary[1]
let resp_salary_2 = +resp.salary[2]

// console.log (typeof(resp_salary_1))
// console.log (typeof(resp.salary[1]))
// Добавили + перед resp.salary[1] тк в консоли number & string (типы)

// 8. Вывести в консоль параметр salary из response.
console.log(resp_salary)

//9. Вывести в консоль 0-й элемент параметра salary из response. [0]
console.log (resp_salary[0]);

//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. [1]
console.log (resp_salary[1]);

//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response. [2]
console.log (resp_salary[2]);

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).

pm.test("0 resp 2500", function () {
    pm.expect(resp_salary_0).to.eql(req_salary);
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).

let req_salary_1 = +req_salary*2

pm.test("0 resp 2500*2", function () {
    pm.expect(resp_salary_1).to.eql(req_salary_1);
});

//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)

let req_salary_2 = req_salary*3

pm.test("1 resp 2500*3", function () {
    pm.expect(resp_salary_2).to.eql(req_salary_2);  
});

//15. Создать в окружении переменную name 
// 17 строка

//16. Создать в окружении переменную age
// 26 строка

// 17. Создать в окружении переменную salary 
// 38 строка

// 18. Передать в окружение переменную name (Snippet = Set an environment variable!)
pm.environment.set("name", req_name);

// 19. Передать в окружение переменную age
pm.environment.set("age", req_age);

// 20. Передать в окружение переменную salary
pm.environment.set("salary", req_salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

for (let salary of resp_salary) {
    console.log(salary);
};

//1-21. user_info_2
// 4. Отправить запрос. 5. Статус код 200 6. Спарсить response body в json.
var jsonData = pm.response.json();
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 7. Спарсить request.
let reqdata = request.data

// 8. Проверить, что json response имеет параметр start_qa_salary (через property!!!)

pm.test("resp have start_qa_salary", function () {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});

// 9. Проверить, что json response имеет параметр qa_salary_after_6_months

pm.test("resp have qa_salary_after_6_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months

pm.test("resp have qa_salary_after_12_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});

// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

pm.test("resp have qa_salary_after_1.5_year", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});

// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years

pm.test("resp have qa_salary_after_3.5_years", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});

// 13. Проверить, что json response имеет параметр person

pm.test("resp have person", function () {
    pm.expect(jsonData).to.have.property("person");
});

// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request). 

let req_salary = +request.data.salary
pm.test("start_qa_salary = req_salary (1500)", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(req_salary);
});

// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request). 

// console.log (typeof(req_salary_6_months));
// console.log (typeof (jsonData.qa_salary_after_6_months))
// Из консоли: req_salary =string и resp_qa_salary_after_6_months =number. Вопрос: Запрос проходит без  добавления + перед request.data.salary*2. Хотя по консоли видно, что это разные типы, почему так?

let req_salary_6_months = +request.data.salary*2

pm.test("qa_salary_after_6_months = req_salary*2", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary_6_months);
});

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request). 

// console.log (typeof(req_salary_12_months));
// console.log (typeof(jsonData.qa_salary_after_12_months));
// Из консоли: req_salary =string и resp_qa_salary_after_12_months =number. Вопрос: Запрос проходит без  добавления + перед request.data.salary*2.7. Хотя по консоли видно, что это разные типы, почему так?

let req_salary_12_months = +request.data.salary*2.7

pm.test("qa_salary_after_12_months = req_salary*2.7", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary_12_months);
});

// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request). Используется ["qa_salary_after_1.5_year"] и req_salary_1dot5year (dot вместо точки).

let req_salary_1dot5year = +request.data.salary*3.3

pm.test("qa_salary_after_1.5_year = req_salary*3.3", function () {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(req_salary_1dot5year);
});

// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request). Используется ["qa_salary_after_3.5_year"] и req_salary_3dot5year (dot вместо точки)

let req_salary_3dot5years = +request.data.salary*3.8

pm.test("qa_salary_after_3.5_years = req_salary*3.8", function () {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(req_salary_3dot5years);
});

// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).

pm.test("1 из person.u_name = req_salary", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql(+reqdata.salary);
});

// 20. Проверить, что параметр u_age равен age из request (age забрать из request).

let req_age = +request.data.age

pm.test("u_age = age (req)", function () {
    pm.expect(jsonData.person.u_age).to.eql(req_age);
});

// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).

let req_u_salary_5_years = +request.data.salary*4.2

pm.test("u_salary_5_years = req.salary*4.2", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_u_salary_5_years);
});

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

for (let a in jsonData.person) {
    console.log ("Elements in person: ", a);
}

